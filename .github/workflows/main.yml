name: adf-ci-cd

on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Azure Login
      uses: Azure/login@v1.4.3
      with:
        # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    - name: npm install
      working-directory: ${{ github.workspace }}
      run: npm install
      
    - name: Validate ADF  
      working-directory: ${{ github.workspace }}
      run:   'npm run build validate ${{ github.workspace }}/adf-data /subscriptions/${{ vars.SUBSCRIPTION }}/resourceGroups/${{ vars.RESOURCEGROUP }}/providers/Microsoft.DataFactory/factories/${{ vars.ADFINSTANCE}}'
    - name: Validate and Generate ARM template
      if: github.ref == 'refs/heads/main'
      working-directory: ${{ github.workspace }}
      run: 'npm run build export ${{ github.workspace }}/adf-data /subscriptions/${{ vars.SUBSCRIPTION }}/resourceGroups/${{ vars.RESOURCEGROUP }}/providers/Microsoft.DataFactory/factories/${{ vars.ADFINSTANCE}} "ArmTemplate"'
    - uses: actions/upload-artifact@v4
      name: Publish Artifacts
      with:
        name: Armtemplates
        path: ${{ github.workspace }}/ArmTemplate    

  deploy-to-Dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    env:
      ARM_TEMPLATE_FILE: ${{ github.workspace }}/ArmTemplate/ARMTemplateForFactory.json
    environment:
      name: 'Dev'
      
    steps:
    - name: Download a Build Artifact
      uses: actions/download-artifact@v4.1.8
      with:
       name: Armtemplates
       path: ${{ github.workspace }}/ArmTemplate
       
    - name: Azure Login
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true 

    #Disable Triggers
    - name: Run Pre-deployment script
      shell: pwsh
      run: pwsh -command "${{ github.workspace }}/ArmTemplate/PrePostDeploymentScript.ps1 -armTemplate ${{ env.ARM_TEMPLATE_FILE }}  -ResourceGroupName ${{ vars.RESOURCEGROUP }} -DataFactoryName ${{ vars.ADFINSTANCE }} -predeployment 1 -deleteDeployment 0"
      
    - name: Deploy ADF ARM Templates to Development
      uses: Azure/arm-deploy@v1
      with:
        scope: 'resourcegroup'
        resourceGroupName: ${{ vars.RESOURCEGROUP }}
        template: ${{ env.ARM_TEMPLATE_FILE }}
        deploymentMode: Incremental
        parameters: 
          factoryName=${{ vars.ADFINSTANCE }}
    
    #Enable Triggers
    - name: Run Post-deployment script
      shell: pwsh
      run: pwsh -command "${{ github.workspace }}/ArmTemplate/PrePostDeploymentScript.ps1 -armTemplate ${{ env.ARM_TEMPLATE_FILE }} -ResourceGroupName ${{ vars.RESOURCEGROUP }} -DataFactoryName ${{ vars.ADFINSTANCE }} -predeployment 0 -deleteDeployment 1"

  deploy-to-PROD:
    runs-on: ubuntu-latest
    needs: build
    env:
      ARM_TEMPLATE_FILE: ${{ github.workspace }}/ArmTemplate/ARMTemplateForFactory.json
    environment:
      name: 'Prod'
      
    steps:
    - name: Download a Build Artifact
      uses: actions/download-artifact@v4.1.8
      with:
       name: Armtemplates
       path: ${{ github.workspace }}/ArmTemplate
       
    - name: Azure Login
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true 

    #Disable Triggers
    - name: Run Pre-deployment script
      shell: pwsh
      run: pwsh -command "${{ github.workspace }}/ArmTemplate/PrePostDeploymentScript.ps1 -armTemplate ${{ env.ARM_TEMPLATE_FILE }}  -ResourceGroupName ${{ vars.RESOURCEGROUP }} -DataFactoryName ${{ vars.ADFINSTANCE }} -predeployment 1 -deleteDeployment 0"
      
    - name: Deploy ADF ARM Templates Production
      uses: Azure/arm-deploy@v1
      with:
        scope: 'resourcegroup'
        resourceGroupName: ${{ vars.RESOURCEGROUP }}
        template: ${{ env.ARM_TEMPLATE_FILE }}
        deploymentMode: Incremental
        parameters: 
          factoryName=${{ vars.ADFINSTANCE }}
    
    #Enable Triggers
    - name: Run Post-deployment script
      shell: pwsh
      run: pwsh -command "${{ github.workspace }}/ArmTemplate/PrePostDeploymentScript.ps1 -armTemplate ${{ env.ARM_TEMPLATE_FILE }} -ResourceGroupName ${{ vars.RESOURCEGROUP }} -DataFactoryName ${{ vars.ADFINSTANCE }} -predeployment 0 -deleteDeployment 1"
